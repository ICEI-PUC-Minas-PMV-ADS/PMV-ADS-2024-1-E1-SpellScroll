@model IEnumerable<spellScrollBackend.Models.Spell>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<div>
    <label for="classFilter">Filter by Class: </label>
    <select id="classFilter" onchange="filterSpells()">
        <option value="">All Classes</option>
        <option value="Bardo">Bardo</option>
        <!-- Add other classes as needed -->
    </select>
</div>

<table class="table" id="spellTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Classes)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Concentration)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Duration)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Level)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Material)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Reach)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Ritual)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().School)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Somatic)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().SpellName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Time)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Verbal)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr class="spellRow" data-classes="@string.Join(",",item.Classes)">
                <td>
                    @Html.DisplayFor(modelItem => item.Classes)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Concentration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Duration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Level)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Material)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Reach)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Ritual)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.School)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Somatic)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SpellName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Time)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Verbal)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        function filterSpells() {
            var selectedClass = document.getElementById("classFilter").value;
            console.log(selectedClass);
            var rows = document.querySelectorAll(".spellRow");
            console.log(rows);

            rows.forEach(function (row) {
                console.log("This is inside the foreach" + row.getAttribute("data-classes"))
                let attributeValue = row.getAttribute("data-classes")
                if (attributeValue && attributeValue.startsWith('[') && attributeValue.endsWith(']')) {
                    let array = JSON.parse(attributeValue);
                    array.map((item) => {
                        if (item === selectedClass) {
                            console.log("mitada");
                            row.style.display = "";
                        } else {
                            console.log("Pão com pomada");
                            row.style.display = "none";
                        }
                    });
                } else {
                    console.error('Attribute value is not an array');
                }
            
                
            });
        }
    </script>
}
